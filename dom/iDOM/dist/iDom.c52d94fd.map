{"version":3,"sources":["iDom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","nodeForPositioning","nodeToInsert","parentNode","insertBefore","nextSibling","before","append","childNode","appendChild","wrap","remove","node","removeChild","empty","text","childNodes","array","length","i","push","attr","name","value","arguments","setAttribute","toString","getAttribute","innerText","html","style","constructor","Object","String","addClass","newClass","classList","add","removeClass","classToRemove","class","on","event","fn","addEventListener","off","removeEventListener","find","selector","range","querySelectorAll","parent","children","textNode","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","prev","each","nodeList","call","index","indexWithText","console","log"],"mappings":"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","file":"iDom.c52d94fd.map","sourceRoot":"../src","sourcesContent":["window.dom = {\n  /** create\n   * 创建可嵌套的标签\n   * @param {string} string 标签字符串\n   * @returns 返回值：创建的嵌套元素的第一个子标签\n   */\n  create(string) {\n    //template标签可以容纳任意元素，不过其中的元素不能通过DOM直接获得\n    const container = document.createElement(\"template\");\n    //去除字符串中的所有空格\n    container.innerHTML = string.trim();\n    return container.content.firstChild;\n  },\n\n  /** after\n   * 在定位节点后插入新的兄弟节点\n   * DOM提供的insertBefore需要知道定位节点的父节点\n   * @param {Node} nodeForPositioning 定位节点\n   * @param {Node} nodeToInsert 要插入的节点\n   * @returns\n   * @example dom.after(node1, node2)\n   */\n  after(nodeForPositioning, nodeToInsert) {\n    nodeForPositioning.parentNode.insertBefore(\n      nodeToInsert,\n      nodeForPositioning.nextSibling\n    );\n  },\n\n  /** before\n   * 在定位节点前插入新的兄弟节点\n   * DOM提供的insertBefore需要知道定位节点的父节点\n   * @param {Node} nodeForPositioning 定位节点\n   * @param {Node} nodeToInsert 要插入的节点\n   * @returns\n   * @example dom.before(node1, node2)\n   */\n  before(nodeForPositioning, nodeToInsert) {\n    nodeForPositioning.parentNode.insertBefore(\n      nodeToInsert,\n      nodeForPositioning\n    );\n  },\n\n  /** append\n   * 在父节点下插入新的子节点\n   * @param {Node} parentNode 父节点\n   * @param {Node} childNode 要插入的子节点\n   * @returns\n   */\n  append(parentNode, childNode) {\n    return parentNode.appendChild(childNode);\n  },\n\n  /** wrap\n   * 将一个节点node移动到新的父节点parent下\n   * @param {Node} childNode 要移动的子节点\n   * @param {Node} parentNode 新的父节点\n   * @returns\n   */\n  wrap(childNode, parentNode) {\n    dom.before(childNode, parentNode);\n    dom.append(parentNode, childNode);\n  },\n\n  /** remove\n   * 删除一个节点,DOM同时移除其下的所有子节点，包括文本节点\n   * @param {Node} node 要删除的节点\n   * @returns 返回值：被删除的节点\n   */\n  remove(node) {\n    node.parentNode.removeChild(node);\n    return node;\n  },\n\n  /** empty\n   * 删除一个节点的所有子节点，但是保留该节点本身\n   * @param {Node} node 要操作的节点\n   * @param {boolean} text 是否删除这个节点本身的文本节点，默认为false\n   * @returns 返回值：被删除的子节点构成的数组\n   */\n  empty(node, text = false) {\n    //const childNodes = node.childNodes;\n    const { childNodes } = node;\n    const array = [];\n    const length = childNodes.length;\n    for (let i = text ? 0 : 1; i < length; i++) {\n      array.push(dom.remove(childNodes[text ? 0 : 1]));\n    }\n    return array;\n  },\n\n  /** attr\n   * 根据参数个数不同，修改或者获取一个节点的属性\n   * @param {*} node 一个节点\n   * @param {*} name 属性名\n   * @param {*} value 属性值\n   * 如果没有传递属性值，则获取对应属性的值；如果有传递属性值，则将属性的值修改为该值\n   * @returns 2个参数时：获取到的属性值；3个参数时：修改后的节点\n   */\n  attr(node, name, value) {\n    if (arguments.length === 3) {\n      node.setAttribute(name.toString(), value);\n      return node;\n    } else if (arguments.length === 2) {\n      return node.getAttribute(name.toString());\n    }\n  },\n\n  /** text\n   * 根据参数个数不同，修改或者获取一个节点下的文本节点内容\n   * @param {Node} node 一个节点\n   * @param {string} value 新的文本内容\n   * 如果没有传递value，则获取当前文本节点内容；如果有传递value，则将文本节点内容修改为该内容\n   * @returns 1个参数时：获取到的文本；2个参数时：修改后的节点\n   */\n  text(node, value) {\n    if (arguments.length === 2) {\n      node.innerText = value.toString();\n      return node;\n    } else if (arguments.length === 1) {\n      return node.innerText;\n    }\n  },\n\n  /** html\n   * 根据参数个数不同，修改或者获取一个节点下的HTML节点内容\n   * @param {Node} node 一个节点\n   * @param {string} value 新的HTML内容\n   * 如果没有传递value，则获取当前HTML节点内容；如果有传递value，则将HTML节点内容修改为该内容\n   * @returns 1个参数时：获取到的HTML；2个参数时：修改后的节点\n   */\n  html(node, value) {\n    if (arguments.length === 2) {\n      node.innerHTML = value.toString();\n      return node;\n    } else if (arguments.length === 1) {\n      return node.innerHTML;\n    }\n  },\n\n  /** style\n   * 功能1: 输入一个键字符串，获取一个节点的style对象中这个键对应的值\n   * 功能2: 输入一个键字符串和一个值字符串，修改一个节点的style对象中的对应键值对。\n   * 功能3: 输入一个对象，修改一个节点的style对象中的所有对应键值对。\n   * @param {Node} node 一个节点\n   * @param {Parameter} value 一个valueObject对象的键值对；或者一个键；或者一个键和一个值\n   * @returns 功能2，3: 一个键字符串和一个值字符串 => 修改后的节点; 功能1： style对象中这个键的值\n   * @examples 功能1使用例：dom.style(s1, \"border\")\n   * @examples 功能2使用例：dom.style(s1, \"border\", \"1px solid red\")\n   * @examples 功能3使用例：dom.style(s1, {\"border\":\"1px solid blue\", \"color\":\"pink\"})\n   */\n  style(node, ...value) {\n    if (value.length === 1) {\n      //对象时使用功能3\n      if (value[0].constructor === Object) {\n        //in语法遍历所有的键\n        for (i in value[0]) {\n          node.style[i] = value[0][i];\n        }\n        return node;\n      } else if (value[0].constructor === String) {\n        //字符串时使用功能1\n        return node.style[value[0]];\n      }\n    } else if (value.length === 2) {\n      //功能2\n      node.style[value[0]] = value[1];\n      return node;\n    }\n  },\n\n  /** addClass\n   * 为一个节点添加class。多个class用逗号隔开。\n   * @param {Node} node 一个节点\n   * @param {...Parameters} newClass 多个class构成的数组\n   * @returns 修改后的节点\n   */\n  addClass(node, ...newClass) {\n    //将newClass展开为参数集\n    node.classList.add(...newClass);\n    return node;\n  },\n\n  /** removeClass\n   * 为一个节点移除class。多个class用逗号隔开。\n   * @param {Node} node 一个节点\n   * @param {...Parameters} classToRemove 要移除的class\n   * @returns 修改后的节点\n   */\n  removeClass(node, ...classToRemove) {\n    //将classToRemove展开为参数集\n    node.classList.remove(...classToRemove);\n    return node;\n  },\n\n  //提供一个综合的class对象实现上述添加移除的操作\n  class: {\n    add(node, ...newClass) {\n      //将newClass展开为参数集\n      node.classList.add(...newClass);\n      return node;\n    },\n    remove(node, ...classToRemove) {\n      //将classToRemove展开为参数集\n      node.classList.remove(...classToRemove);\n      return node;\n    },\n  },\n\n  /** on\n   * 给一个节点绑定事件\n   * @param {node} 待绑定事件的节点\n   * @param {event} 触发事件\n   * @param {fn} 回调函数\n   * @returns\n   */\n  on(node, event, fn) {\n    return node.addEventListener(event, fn);\n  },\n\n  /** off\n   * 移除一个事件的绑定函数\n   * @param {node} 绑定了事件的节点\n   * @param {event} 事件\n   * @param {fn} 回调函数\n   * @returns\n   */\n  off(node, event, fn) {\n    return node.removeEventListener(event, fn);\n  },\n\n  /** find\n   * 选择特定的节点，只能选择标签类节点\n   * @param {string} CSS形式的选择器\n   * @param {range} 可以预先指定一个有id属性的节点作为查找范围\n   * @returns NodeList\n   */\n  find(selector, range = document) {\n    return range.querySelectorAll(selector);\n  },\n\n  /** parent\n   * 选择特定的节点的父节点\n   * @param {string} CSS形式的选择器\n   * @param {range} 可以预先指定一个有id属性的节点作为查找范围\n   * @returns 父节点\n   */\n  parent(node) {\n    return node.parentNode;\n  },\n\n  /** children\n   * 获取特定的节点的所有子节点，\n   * @param {Node} node 一个节点\n   * @param {boolean} textNode 是否考虑文本节点，默认为false\n   * @returns 所有子节点构成的伪数组\n   */\n  children(node, textNode = false) {\n    return textNode ? node.childNodes : node.children;\n  },\n\n  /** siblings\n   * 获取一个节点的所有兄弟节点\n   * @param {Node} node 要操作的节点\n   * @param {boolean} textNode 是否考虑文本节点，默认为false\n   * @returns 所有兄弟节点组成的数组\n   */\n  siblings(node, textNode = false) {\n    if (textNode) {\n      return Array.from(node.parentNode.childNodes).filter((n) => n !== node);\n    } else {\n      return Array.from(node.parentNode.children).filter((n) => n !== node);\n    }\n  },\n\n  /** next\n   * 获取一个节点的下一个兄弟节点\n   * @param {Node} node 要操作的节点\n   * @param {boolean} textNode 是否考虑文本节点，默认为false\n   * @returns 下一个节点\n   */\n  next(node, textNode = false) {\n    if (textNode) {\n      return node.nextSibling;\n    } else {\n      let next = node.nextSibling;\n      while (next.nodeType !== 1) {\n        next = next.nextSibling;\n      }\n      return next;\n    }\n  },\n\n  /** previous\n   * 获取一个节点的上一个兄弟节点\n   * @param {Node} node 要操作的节点\n   * @param {boolean} textNode 是否考虑文本节点，默认为false\n   * @returns 上一个节点\n   */\n  previous(node, textNode = false) {\n    if (textNode) {\n      return node.previousSibling;\n    } else {\n      let prev = node.previousSibling;\n      while (prev.nodeType !== 1) {\n        prev = prev.previousSibling;\n      }\n      return prev;\n    }\n  },\n\n  /** each\n   * 遍历一个节点下的所有子节点，每次遍历到新元素可以对该元素执行一个函数\n   * @param {NodeList} nodeList 节点组成的数组或伪数组\n   * @param {function} fn 回调函数\n   * @param {boolean} textNode 是否考虑文本节点，默认为false\n   */\n  each(nodeList, fn, textNode = false) {\n    let children = nodeList;\n    for (let i = 0; i < children.length; i++) {\n      if (textNode) {\n        fn.call(null, children[i]);\n      } else {\n        if (children[i].nodeType === 1) {\n          fn.call(null, children[i]);\n        }\n      }\n    }\n  },\n\n  /** index\n   * 计算该节点是其父节点下的第几个子节点\n   * @param {Node} node 一个节点\n   * @param {boolean} textNode 是否考虑文本节点，默认为false\n   * @returns 该节点是其父节点下的第几个子节点，计数从1开始。\n   */\n  index(node, textNode = false) {\n    let index = 0,\n      indexWithText = 0;\n    children = node.parentNode.childNodes;\n    for (let i = 0; i < children.length; i++) {\n      indexWithText++;\n      if (children[i].nodeType === 1) {\n        index++;\n      }\n      if (children[i] === node) {\n        break;\n      }\n    }\n    return textNode ? indexWithText : index;\n  },\n};\n\nconsole.log(\"iQuery加载完毕\");\n"]}